I"Š0<p>Below is a small summary of Blocks, Procs and Lambdas in Ruby.<br />
Up first, we have Blocks:</p>

<h2 id="blocks">Blocks</h2>

<p>Blocks are bits of code that can be put after an enumerator and iterate
through it in the format:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">enumerator</span><span class="p">]</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="o">...|</span> <span class="o">...</span> <span class="p">}</span>
</code></pre></div></div>

<p>or</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">enumerator</span><span class="p">]</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="o">...|</span>
    <span class="o">...</span>
<span class="k">end</span>
</code></pre></div></div>

<p>For example</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]].</span><span class="nf">each</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="p">}</span>
</code></pre></div></div>

<p>can also be written as</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]].</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">|</span>
    <span class="nb">puts</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span>
<span class="k">end</span>
</code></pre></div></div>

<p>and will output</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2
6
12
</code></pre></div></div>

<p>while</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">3</span><span class="p">.</span><span class="nf">times</span> <span class="p">{</span><span class="nb">puts</span> <span class="s2">"hello"</span><span class="p">}</span>
</code></pre></div></div>

<p>or</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">3</span><span class="p">.</span><span class="nf">times</span> <span class="k">do</span>
    <span class="nb">puts</span> <span class="s2">"hello"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Will output:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hello
hello
hello
</code></pre></div></div>

<h3 id="yielding-to-blocks">Yielding to Blocks</h3>

<p>Methods can also accept blocks by making use of the <code class="language-plaintext highlighter-rouge">yield</code> command. If used in
a method, control can be â€˜yieldedâ€™ to the block mid execution. For example, if
we have a method:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">do_three_times</span>
    <span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..</span><span class="mi">3</span>
        <span class="k">yield</span>
    <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p>we can call it with a block as follows:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">do_three_times</span> <span class="p">{</span><span class="nb">puts</span> <span class="s2">"hi"</span><span class="p">}</span>
</code></pre></div></div>

<p>or, equivalently,</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">do_three_times</span> <span class="k">do</span>
    <span class="nb">puts</span> <span class="s2">"hi"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>to get the output:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hi
hi
hi
</code></pre></div></div>

<p>You can also yield values, for example:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">yield_i</span>
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">..</span><span class="mi">3</span>
        <span class="k">yield</span> <span class="n">i</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="n">yield_i</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span><span class="p">}</span>
</code></pre></div></div>

<p>will produce the output:</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1
2
3
</code></pre></div></div>

<p>What if you want to reuse a block though? For this purpose, we use procs.</p>

<h2 id="procs">Procs</h2>

<p>Unlike blocks, procs are objects and can therefore be used multiple times.
Procs can be defined as follows:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">my_proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="p">[</span><span class="n">block</span><span class="p">]</span>
</code></pre></div></div>

<p>where <code class="language-plaintext highlighter-rouge">[block]</code> is any block, for example:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span><span class="p">}</span>
</code></pre></div></div>

<p>Procs can be converted to blocks by using the â€˜<code class="language-plaintext highlighter-rouge">&amp;</code>â€™ symbol, like follows:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">3</span><span class="p">.</span><span class="nf">times</span> <span class="o">&amp;</span><span class="n">my_proc</span>
</code></pre></div></div>

<p>For example, if we can make a proc that doubles given numbers, i.e.</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">doubler</span> <span class="o">=</span> <span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span><span class="p">}</span>
</code></pre></div></div>

<p>Which we could then use to double each element in a list:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">doubled_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="nf">collect</span> <span class="o">&amp;</span><span class="n">doubler</span>
</code></pre></div></div>

<p>A proc can also be turned in a method, by using the <code class="language-plaintext highlighter-rouge">.call</code> method. For example,
in the following snippet:</p>

<pre><code class="language-Ruby">my_proc = Proc.new {|x| puts x}

my_proc.call "Hello"
</code></pre>

<p>the proc <code class="language-plaintext highlighter-rouge">my_proc</code> is converted into a method using <code class="language-plaintext highlighter-rouge">my_proc.call</code>, which is
given the input <code class="language-plaintext highlighter-rouge">"Hello"</code>. This would then â€˜putâ€™ <code class="language-plaintext highlighter-rouge">"Hello"</code> to the console.</p>

<h2 id="lambdas">lambdas</h2>

<p>Lambdas are very similar to procs. While procs are defined as follows,</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="p">[</span><span class="n">block</span><span class="p">]</span>
</code></pre></div></div>

<p>Lambdas are defined by:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">lambda</span> <span class="p">[</span><span class="n">block</span><span class="p">]</span>
</code></pre></div></div>

<p>like procs, lambdas can be converted to a method using the <code class="language-plaintext highlighter-rouge">.call</code> method, and
can be used as a block with the <code class="language-plaintext highlighter-rouge">&amp;</code> symbol. There are however a few small
differences between procs and lambdas.</p>

<h3 id="differences-between-procs-and-lambdas">Differences between procs and lambdas</h3>

<p>There are two main differences between implementing lambdas and procs.</p>

<ol>
  <li>a lambda checks the number of arguments passed into it, and will throw an error
if it is given the wrong number of inputs. A proc on the other hand will not
check, and assigns <code class="language-plaintext highlighter-rouge">nil</code> to any missing arguments.</li>
  <li><code class="language-plaintext highlighter-rouge">return</code>  in a lambda will pass control back to where it was called from.
<code class="language-plaintext highlighter-rouge">return</code> in a proc will return â€˜fullyâ€™, without going back to a method it was
called from.</li>
</ol>

<p>for example, the function:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_return_lambda</span>
    <span class="n">my_lambda</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span><span class="k">return</span> <span class="s2">"I'm in the block"</span><span class="p">}</span>
    <span class="n">my_lambda</span><span class="p">.</span><span class="nf">call</span>
    <span class="s2">"I'm in the method"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>will return the string <code class="language-plaintext highlighter-rouge">"I'm in the method"</code>, while the function</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_return_proc</span>
    <span class="n">my_proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="p">.</span><span class="nf">new</span> <span class="p">{</span><span class="k">return</span> <span class="s2">"I'm in the block"</span><span class="p">}</span>
    <span class="n">my_proc</span><span class="p">.</span><span class="nf">call</span>
    <span class="s2">"I'm in the method"</span>
<span class="k">end</span> 
</code></pre></div></div>

<p>will return the string <code class="language-plaintext highlighter-rouge">"I'm in the block"</code>.</p>
:ET